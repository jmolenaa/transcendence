The DOM (Document Object Model) is a programming interface for web documents. It represents the page so that programs can manipulate its structure, style, and content. 
html
  ├── head
  │   └── title
  └── body
      ├── h1
      └── p

HTML → DOM: When a browser loads an HTML page, it parses the HTML content and creates a DOM in memory.

Manipulation with JavaScript: JavaScript interacts with the DOM to dynamically change the content, structure, and style of the page without requiring a full reload of the page.

For example, you can change the text inside a <p> tag, add new elements, remove elements, or even change CSS styles.

Dynamic Updates: As the DOM is an in-memory representation, changes made through JavaScript immediately update what you see on the page. When the DOM is updated, the browser re-renders the changes.

Examples of using:
document.getElementById(id): Retrieves an element by its id.

document.querySelector(selector): Retrieves the first element that matches a CSS selector.

element.style: Changes the inline styles of an element.

element.innerHTML: Changes the inner HTML of an element.



Elements Tab in Browser Inspect:
This tab shows the DOM as a tree structure, similar to how the browser reads it.
You can navigate through the tree, expand/collapse nodes, and see the HTML structure of the page.

You can interact with the DOM directly from the Console tab.
Example:

To check if an element exists in the DOM:
document.getElementById('rejection');  

When Should You Manually Add Elements to the DOM?
Dynamic Content Generation: When you need to create new elements based on user interactions, API responses, or other dynamic data. For example:

Creating a new item in a to-do list.

Adding comments or posts on a social media page.

Showing a modal (popup) based on some action.

Interactive Features: If you need to build something that updates in real time or is highly interactive, like a chat application, you may need to add elements dynamically.

Modals, Popups, and Notifications: Often you need to create modals (popups) or notification elements in response to certain events (like a failed login or a successful action). This would require adding an element to the DOM and removing it when it's no longer needed.